# Configuration sample file for smashwilson/lets-nginx by saintech. Sources:
# https://gist.github.com/paskal/628882bee1948ef126dd
# https://github.com/h5bp/server-configs-nginx
# https://github.com/nginx-boilerplate/nginx-boilerplate
# https://habrahabr.ru/post/325230/
# https://habrahabr.ru/post/198982/

map $host $location {
    hostnames;
    default @default;
    dev.* @dev;
    ci.* @ci;
    registry.* @registry;
    docker.* @docker;
}

server {
    server_name ${DOMAIN};

    listen 80;
    listen [::]:80;

    # Redirect all http traffic to https.
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
    
    ########################
    #   SSL AND SECURITY
    ########################

    listen 443 ssl;
    listen [::]:443 ssl;

    ssl_certificate /etc/letsencrypt/live/${PATH}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PATH}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${PATH}/chain.pem;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # to generate your dhparam.pem file, run in the terminal:
    # $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
    ssl_dhparam /etc/ssl/dhparams.pem;

    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache
    # make it bigger for more sessions, one megabyte for ~ 4000 session
    ssl_session_cache shared:SSL:100m;
    ssl_session_timeout 60m;
    ssl_session_tickets off;

    # Enables server-side protection from BEAST attacks.
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;

    # Disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS.
    # http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # Ciphers are latest modern from https://wiki.mozilla.org/Security/Server_Side_TLS (only place you can trust on web)
    # working example:
    # ssl_ciphers 'EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DES';
    ssl_ciphers 'EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4';

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    resolver 127.0.0.11;
    ssl_stapling on;
    ssl_stapling_verify on;

    # For Letsencrypt webroot acme challenge.
    location /.well-known/acme-challenge {
        root /etc/letsencrypt/webrootauth/.well-known/acme-challenge;
    }

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
        deny all;
    }
    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }
    
    # Force the latest IE version
    add_header "X-UA-Compatible" "IE=Edge";

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN always;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff always;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block" always;

    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
    add_header Content-Security-Policy "default-src 'self'; connect-src 'self' wss://${DOMAIN}; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https://bitbucket.org https://*.atlassian.com https://secure.gravatar.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; object-src 'none'" always;

    # enabling HSTS(HTTP Strict Transport Security)
    # https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;
    
    #################
    #   LOCATIONS
    #################

    # Conditional locations hack.
    try_files $uri $location;

    # Location for *.example.com.
    location @default {
        limit_req zone=req_zone_api burst=4 nodelay;
        return 444;
    }

    # Location for static Single Page Application with JS router like Vue-Router.
    location @dev {
        limit_req zone=req_zone_api burst=4 nodelay;
        auth_basic "Closed area";
        auth_basic_user_file /etc/htpasswd/.htpasswd;
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        if ($request_uri ~* \.(?:html?|json|css|js)$) {
            expires 15m;
            access_log off;
        }
        if ($request_uri ~* \.(?:txt|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webp|webm|htc|ttf|ttc|otf|eot|woff|woff2)$) {
            expires 30d;
            access_log off;
        }
    }

    # Location for ci.example.com.
    location @ci {
        limit_req zone=req_zone_static burst=10;
        proxy_pass http://${UPSTREAM};
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_hide_header X-Content-Type-Options;
        proxy_hide_header X-Frame-Options;
        proxy_hide_header X-Xss-Protection;
    }

    # Location for registry.example.com.
    location @registry {
        limit_req zone=req_zone_api burst=10;
        auth_basic "Registry realm";
        auth_basic_user_file /etc/htpasswd/.htpasswd;
        client_max_body_size 600m;
        proxy_pass http://${UPSTREAM};
        proxy_set_header  Host              $host;   # required for docker client's sake
        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_read_timeout                  900;
        proxy_hide_header X-Content-Type-Options;
    }

    # Location for docker.example.com.
    location @docker {
        limit_req zone=req_zone_static burst=10;
        proxy_pass http://${UPSTREAM};
        proxy_http_version 1.1;
        set $upgrade_header "";
        set $connection_header "";
        if ($request_uri ~ ^/api/websocket) {
            set $upgrade_header $http_upgrade;
            set $connection_header "upgrade";
        }
        proxy_set_header Upgrade $upgrade_header;
        proxy_set_header Connection $connection_header;
        proxy_hide_header X-Content-Type-Options;
        proxy_hide_header X-Frame-Options;
    }
}
